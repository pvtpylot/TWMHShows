@using MauiBlazorWeb.Shared.Models
@using MauiBlazorWeb.Shared.Models.DTOs
@using MauiBlazorWeb.Shared.Services
@inject IRoleService RoleService

<div class="row">
    <div class="col-md-5">
        <h4>Users</h4>
        <div class="list-group">
            @if (Users?.Count > 0)
            {
                @foreach (var u in Users)
                {
                    var isActive = SelectedUser?.Id == u.Id ? "active" : "";
                    <button class="list-group-item list-group-item-action @isActive"
                            @onclick="() => SelectUserAsync(u)">
                        <div class="d-flex w-100 justify-content-between">
                            <h6 class="mb-1">@(!string.IsNullOrWhiteSpace(u.UserName) ? u.UserName : u.Email)</h6>
                            <small>@(u.EmailConfirmed ? "Confirmed" : "Unconfirmed")</small>
                        </div>
                        <small>@u.Email</small>
                    </button>
                }
            }
            else
            {
                <div class="text-muted">No users found.</div>
            }
        </div>
    </div>

    <div class="col-md-7">
        <h4>User Roles</h4>

        @if (SelectedUser is null)
        {
            <div class="alert alert-info">Select a user to manage roles.</div>
        }
        else
        {
            <div class="mb-3">
                <strong>User:</strong> @SelectedUser.UserName (@SelectedUser.Email)
            </div>

            <div class="mb-3">
                <label class="form-label">Add Role</label>
                <div class="input-group">
                    <select class="form-select" @bind="RoleToAdd">
                        <option value="">-- Select a role --</option>
                        @foreach (var role in AssignableRoles)
                        {
                            <option value="@role">@role</option>
                        }
                    </select>
                    <button class="btn btn-primary" @onclick="AddRoleAsync" disabled="@string.IsNullOrEmpty(RoleToAdd)">Add</button>
                </div>
                @if (!AllRolesLoaded)
                {
                    <small class="text-warning">Roles not loaded yet.</small>
                }
            </div>

            <div>
                <label class="form-label">Current Roles</label>
                <div>
                    @if (UserRoles.Count == 0)
                    {
                        <span class="text-muted">No roles assigned.</span>
                    }
                    else
                    {
                        @foreach (var role in UserRoles)
                        {
                            <span class="badge text-bg-secondary me-2">
                                @role
                                <button type="button"
                                        class="btn btn-sm btn-link link-light ms-1 p-0 align-baseline"
                                        title="Remove"
                                        @onclick="() => RemoveRoleAsync(role)">
                                    ×
                                </button>
                            </span>
                        }
                    }
                </div>
            </div>

            @if (!string.IsNullOrEmpty(StatusMessage))
            {
                <div class="mt-3 alert @(StatusIsError ? "alert-danger" : "alert-success")">
                    @StatusMessage
                </div>
            }
        }
    </div>
</div>

@code {
    [Parameter] public List<UserDto> Users { get; set; } = new();
    [Parameter] public UserDto? SelectedUser { get; set; }
    [Parameter] public EventCallback<UserDto> OnUserSelected { get; set; }

    private List<string> AllRoles { get; set; } = new();
    private bool AllRolesLoaded { get; set; }
    private List<string> UserRoles { get; set; } = new();
    private List<string> AssignableRoles { get; set; } = new();
    private string RoleToAdd { get; set; } = string.Empty;

    private string StatusMessage { get; set; } = string.Empty;
    private bool StatusIsError { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadAllRolesAsync();
        if (SelectedUser is not null)
            await LoadUserRolesAsync(SelectedUser.Id);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (SelectedUser is not null)
        {
            await LoadUserRolesAsync(SelectedUser.Id);
        }
        UpdateAssignableRoles();
    }

    private async Task LoadAllRolesAsync()
    {
        try
        {
            AllRoles = (await RoleService.GetAllRolesAsync()).ToList();
            AllRolesLoaded = true;
        }
        catch (Exception ex)
        {
            // Fallback so you can proceed (and see the error)
            AllRoles = ApplicationRoles.AllRoles.ToList();
            AllRolesLoaded = true;
            SetStatus($"Could not load roles from service; using fallback. Details: {ex.Message}", true);
        }
        UpdateAssignableRoles();
    }

    private async Task LoadUserRolesAsync(string userId)
    {
        try
        {
            var roles = await RoleService.GetUserRolesAsync(userId);
            UserRoles = roles.ToList();
            // keep SelectedUser.Roles in sync if present
            SelectedUser!.Roles = UserRoles.ToList();
        }
        catch (Exception ex)
        {
            UserRoles = new();
            SetStatus($"Error loading user roles: {ex.Message}", true);
        }
        UpdateAssignableRoles();
    }

    private void UpdateAssignableRoles()
    {
        AssignableRoles = AllRoles.Except(UserRoles, StringComparer.OrdinalIgnoreCase).OrderBy(r => r).ToList();
        if (!AssignableRoles.Contains(RoleToAdd, StringComparer.OrdinalIgnoreCase))
            RoleToAdd = string.Empty;
    }

    private async Task SelectUserAsync(UserDto user)
    {
        await OnUserSelected.InvokeAsync(user);
        await LoadUserRolesAsync(user.Id);
        ClearStatus();
    }

    private async Task AddRoleAsync()
    {
        if (SelectedUser is null || string.IsNullOrEmpty(RoleToAdd))
            return;

        var ok = await RoleService.AddUserToRoleAsync(SelectedUser.Id, RoleToAdd);
        if (ok)
        {
            SetStatus($"Added role '{RoleToAdd}'", false);
            await LoadUserRolesAsync(SelectedUser.Id);
            RoleToAdd = string.Empty;
        }
        else
        {
            SetStatus($"Failed to add role '{RoleToAdd}'", true);
        }
        UpdateAssignableRoles();
    }

    private async Task RemoveRoleAsync(string role)
    {
        if (SelectedUser is null)
            return;

        var ok = await RoleService.RemoveUserFromRoleAsync(SelectedUser.Id, role);
        if (ok)
        {
            SetStatus($"Removed role '{role}'", false);
            await LoadUserRolesAsync(SelectedUser.Id);
        }
        else
        {
            SetStatus($"Failed to remove role '{role}'", true);
        }
        UpdateAssignableRoles();
    }

    private void SetStatus(string msg, bool isError)
    {
        StatusMessage = msg;
        StatusIsError = isError;
    }

    private void ClearStatus()
    {
        StatusMessage = string.Empty;
        StatusIsError = false;
    }
}