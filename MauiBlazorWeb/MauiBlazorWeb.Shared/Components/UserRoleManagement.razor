@using MauiBlazorWeb.Shared.Models
@using MauiBlazorWeb.Shared.Models.DTOs
@using MauiBlazorWeb.Shared.Services
@inject IRoleService RoleService

<div class="role-management-container">
    <h3>User Role Management</h3>
    
    @if (IsLoading)
    {
        <div class="loading">Loading user data...</div>
    }
    else if (SelectedUser == null)
    {
        <div class="user-selection">
            <h4>Select a user to manage roles</h4>
            <div class="search-box">
                <input type="text" placeholder="Search users..." @bind-value="SearchTerm" @bind-value:event="oninput" />
            </div>
            <div class="user-list">
                @if (Users?.Any() == true)
                {
                    @foreach (var user in FilteredUsers)
                    {
                        <div class="user-item" @onclick="() => SelectUserAsync(user)">
                            <span class="user-name">@user.UserName</span>
                            <span class="user-email">@user.Email</span>
                        </div>
                    }
                }
                else
                {
                    <div class="no-users">No users found</div>
                }
            </div>
        </div>
    }
    else
    {
        <div class="user-details">
            <div class="user-header">
                <h4>@SelectedUser.UserName</h4>
                <div class="user-email">@SelectedUser.Email</div>
                <button class="btn btn-sm btn-secondary" @onclick="ClearSelectedUser">Back to List</button>
            </div>
            
            <div class="current-roles">
                <h5>Current Roles</h5>
                @if (UserRoles?.Any() == true)
                {
                    <div class="role-badges">
                        @foreach (var role in UserRoles)
                        {
                            <div class="role-badge">
                                <span>@role</span>
                                <button class="remove-role" @onclick="() => RemoveRoleAsync(role)" title="Remove role">
                                    <i class="icon-remove">×</i>
                                </button>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="no-roles">User has no roles assigned</div>
                }
            </div>
            
            <div class="add-role">
                <h5>Add Role</h5>
                <div class="role-selection">
                    <select @bind="SelectedRole">
                        <option value="">-- Select Role --</option>
                        @foreach (var role in AvailableRoles)
                        {
                            <option value="@role">@role</option>
                        }
                    </select>
                    <button class="btn btn-primary" @onclick="AddRoleAsync" disabled="@string.IsNullOrEmpty(SelectedRole)">
                        Add Role
                    </button>
                </div>
            </div>
            
            @if (!string.IsNullOrEmpty(StatusMessage))
            {
                <div class="@(StatusIsError ? "status-error" : "status-success")">
                    @StatusMessage
                </div>
            }
        </div>
    }
</div>

<style>
    .role-management-container {
        padding: 1rem;
    }
    
    .loading {
        padding: 1rem;
        color: #666;
    }
    
    .user-selection {
        margin-bottom: 1rem;
    }
    
    .search-box {
        margin-bottom: 0.5rem;
    }
    
    .search-box input {
        width: 100%;
        padding: 0.5rem;
        border: 1px solid #ccc;
        border-radius: 4px;
    }
    
    .user-list {
        max-height: 400px;
        overflow-y: auto;
        border: 1px solid #eee;
        border-radius: 4px;
    }
    
    .user-item {
        padding: 0.75rem;
        border-bottom: 1px solid #eee;
        cursor: pointer;
    }
    
    .user-item:hover {
        background-color: #f5f5f5;
    }
    
    .user-item:last-child {
        border-bottom: none;
    }
    
    .user-name {
        display: block;
        font-weight: bold;
    }
    
    .user-email {
        display: block;
        font-size: 0.875rem;
        color: #666;
    }
    
    .user-header {
        margin-bottom: 1.5rem;
    }
    
    .current-roles, .add-role {
        margin-bottom: 1.5rem;
    }
    
    .role-badges {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
    }
    
    .role-badge {
        display: inline-flex;
        align-items: center;
        background-color: #0d6efd;
        color: white;
        padding: 0.25rem 0.75rem;
        border-radius: 16px;
    }
    
    .remove-role {
        background: none;
        border: none;
        color: white;
        margin-left: 0.5rem;
        cursor: pointer;
        font-size: 1.25rem;
        line-height: 1;
        padding: 0 0.25rem;
    }
    
    .role-selection {
        display: flex;
        gap: 0.5rem;
    }
    
    .role-selection select {
        flex: 1;
        padding: 0.375rem 0.75rem;
        border: 1px solid #ced4da;
        border-radius: 0.25rem;
    }
    
    .no-roles, .no-users {
        padding: 1rem;
        color: #666;
        font-style: italic;
    }
    
    .status-error, .status-success {
        padding: 0.75rem;
        border-radius: 4px;
        margin-top: 1rem;
    }
    
    .status-error {
        background-color: #f8d7da;
        color: #842029;
        border: 1px solid #f5c2c7;
    }
    
    .status-success {
        background-color: #d1e7dd;
        color: #0f5132;
        border: 1px solid #badbcc;
    }
</style>

@code {
    [Parameter] public List<UserDto> Users { get; set; } = new();
    [Parameter] public UserDto? SelectedUser { get; set; }
    [Parameter] public EventCallback<UserDto> OnUserSelected { get; set; }
    
    private IEnumerable<string> UserRoles { get; set; } = Array.Empty<string>();
    private IEnumerable<string> AllRoles { get; set; } = Array.Empty<string>();
    private string SearchTerm = string.Empty;
    private string SelectedRole = string.Empty;
    private bool IsLoading = false;
    private string StatusMessage = string.Empty;
    private bool StatusIsError = false;
    
    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        try
        {
            AllRoles = await RoleService.GetAllRolesAsync();
        }
        catch (Exception ex)
        {
            StatusMessage = $"Error loading roles: {ex.Message}";
            StatusIsError = true;
        }
        finally
        {
            IsLoading = false;
        }
    }
    
    protected override async Task OnParametersSetAsync()
    {
        if (SelectedUser != null)
        {
            await LoadUserRolesAsync();
        }
    }
    
    private IEnumerable<UserDto> FilteredUsers => 
        Users.Where(u => string.IsNullOrEmpty(SearchTerm) || 
                        u.UserName?.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) == true ||
                        u.Email?.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) == true).ToList();
    
    private IEnumerable<string> AvailableRoles => 
        AllRoles.Except(UserRoles).ToList();
    
    private async Task SelectUserAsync(UserDto user)
    {
        SelectedUser = user;
        await OnUserSelected.InvokeAsync(user);
        await LoadUserRolesAsync();
        StatusMessage = string.Empty;
    }
    
    private void ClearSelectedUser()
    {
        SelectedUser = null;
        UserRoles = Array.Empty<string>();
        StatusMessage = string.Empty;
        OnUserSelected.InvokeAsync(null);
    }
    
    private async Task LoadUserRolesAsync()
    {
        if (SelectedUser != null)
        {
            IsLoading = true;
            try
            {
                UserRoles = await RoleService.GetUserRolesAsync(SelectedUser.Id);
            }
            catch (Exception ex)
            {
                StatusMessage = $"Error loading user roles: {ex.Message}";
                StatusIsError = true;
            }
            finally
            {
                IsLoading = false;
            }
        }
    }
    
    private async Task AddRoleAsync()
    {
        if (SelectedUser != null && !string.IsNullOrEmpty(SelectedRole))
        {
            IsLoading = true;
            try
            {
                var result = await RoleService.AddUserToRoleAsync(SelectedUser.Id, SelectedRole);
                if (result)
                {
                    StatusMessage = $"Role '{SelectedRole}' added successfully";
                    StatusIsError = false;
                    await LoadUserRolesAsync();
                    SelectedRole = string.Empty;
                }
                else
                {
                    StatusMessage = $"Failed to add role '{SelectedRole}'";
                    StatusIsError = true;
                }
            }
            catch (Exception ex)
            {
                StatusMessage = $"Error: {ex.Message}";
                StatusIsError = true;
            }
            finally
            {
                IsLoading = false;
            }
        }
    }
    
    private async Task RemoveRoleAsync(string role)
    {
        if (SelectedUser != null)
        {
            IsLoading = true;
            try
            {
                var result = await RoleService.RemoveUserFromRoleAsync(SelectedUser.Id, role);
                if (result)
                {
                    StatusMessage = $"Role '{role}' removed successfully";
                    StatusIsError = false;
                    await LoadUserRolesAsync();
                }
                else
                {
                    StatusMessage = $"Failed to remove role '{role}'";
                    StatusIsError = true;
                }
            }
            catch (Exception ex)
            {
                StatusMessage = $"Error: {ex.Message}";
                StatusIsError = true;
            }
            finally
            {
                IsLoading = false;
            }
        }
    }
}