@using MauiBlazorWeb.Shared.Models.DTOs
@using MauiBlazorWeb.Shared.Services
@inject IDivisionService DivisionService

<div>
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h5 class="mb-0">Divisions</h5>
        <button class="btn btn-sm btn-primary" @onclick="NewDivision"><span class="bi bi-plus-lg"></span> Add Division</button>
    </div>

    @if (!string.IsNullOrWhiteSpace(ErrorMessage))
    {
        <div class="alert alert-danger">@ErrorMessage</div>
    }

    @if (isLoading)
    {
        <div class="text-muted">Loading divisions...</div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-sm table-striped align-middle">
                <thead>
                    <tr>
                        <th style="width: 60px;">Order</th>
                        <th>Name</th>
                        <th>Type</th>
                        <th>Description</th>
                        <th style="width: 180px;">Actions</th>
                    </tr>
                </thead>
                <tbody>
                @if (divisions.Count == 0)
                {
                    <tr><td colspan="5" class="text-muted">No divisions defined.</td></tr>
                }
                else
                {
                    @foreach (var d in divisions.OrderBy(x => x.SortOrder).ThenBy(x => x.Name))
                    {
                        <tr class="@(editModel?.Id == d.Id ? "table-primary" : null)">
                            <td>@d.SortOrder</td>
                            <td>@d.Name</td>
                            <td>@d.DivisionType</td>
                            <td class="text-truncate" style="max-width: 400px;">@d.Description</td>
                            <td>
                                <div class="btn-group btn-group-sm">
                                    <button class="btn btn-outline-secondary" @onclick="() => Edit(d)"><span class="bi bi-pencil-square"></span></button>
                                    <button class="btn btn-outline-danger" @onclick="() => Delete(d)"><span class="bi bi-trash"></span></button>
                                </div>
                            </td>
                        </tr>
                    }
                }
                </tbody>
            </table>
        </div>
    }

    @if (isEditing && editModel is not null)
    {
        <div class="card mt-3">
            <div class="card-header">
                <strong>@(string.IsNullOrEmpty(editModel.Id) ? "Add Division" : "Edit Division")</strong>
            </div>
            <div class="card-body">
                <EditForm Model="editModel" OnValidSubmit="SaveAsync">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="row g-3">
                        <div class="col-md-4">
                            <label class="form-label">Name</label>
                            <InputText class="form-control" @bind-Value="editModel.Name" />
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">Type</label>
                            <InputSelect class="form-select" @bind-Value="editModel.DivisionType">
                                @foreach (var t in divisionTypes)
                                {
                                    <option value="@t">@t</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">Sort Order</label>
                            <InputNumber class="form-control" @bind-Value="editModel.SortOrder" />
                        </div>
                        <div class="col-12">
                            <label class="form-label">Description</label>
                            <InputTextArea class="form-control" rows="2" @bind-Value="editModel.Description" />
                        </div>
                    </div>
                    <div class="mt-3">
                        <button type="submit" class="btn btn-success me-2"><span class="bi bi-check2"></span> Save</button>
                        <button type="button" class="btn btn-secondary" @onclick="Cancel"><span class="bi bi-x-lg"></span> Cancel</button>
                    </div>
                </EditForm>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public int ShowId { get; set; }

    private List<DivisionDto> divisions = new();
    private DivisionDto editModel = new();
    private bool isEditing;
    private bool isLoading = true;
    private string? ErrorMessage;

    private static readonly string[] divisionTypes = new[] { "Halter", "Performance", "Collectibility", "Workmanship", "Other" };

    protected override async Task OnParametersSetAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        try
        {
            isLoading = true;
            divisions = (await DivisionService.GetAllByShowIdAsync(ShowId.ToString())).ToList();
            ErrorMessage = null;
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void NewDivision()
    {
        editModel = new DivisionDto
        {
            ShowId = ShowId,
            DivisionType = "Halter",
            SortOrder = (divisions.Count == 0 ? 1 : divisions.Max(d => d.SortOrder) + 1)
        };
        isEditing = true;
    }

    private void Edit(DivisionDto d)
    {
        editModel = new DivisionDto
        {
            Id = d.Id,
            Name = d.Name,
            Description = d.Description,
            DivisionType = d.DivisionType,
            SortOrder = d.SortOrder,
            ShowId = d.ShowId
        };
        isEditing = true;
    }

    private void Cancel()
    {
        isEditing = false;
        editModel = new DivisionDto();
    }

    private async Task SaveAsync()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(editModel.Id))
                await DivisionService.CreateDivisionAsync(editModel);
            else
                await DivisionService.UpdateDivisionAsync(editModel);

            isEditing = false;
            await LoadAsync();
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    private async Task Delete(DivisionDto d)
    {
        try
        {
            await DivisionService.DeleteDivisionAsync(d.Id);
            await LoadAsync();
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }
}