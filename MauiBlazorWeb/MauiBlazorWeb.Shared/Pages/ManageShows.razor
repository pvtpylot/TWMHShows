@page "/manage-shows"
@attribute [Authorize(Roles = "ShowHolder,Admin")]
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using MauiBlazorWeb.Shared.Models.DTOs
@using MauiBlazorWeb.Shared.Services
@inject IShowHolderService ShowHolderService
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Manage Shows</PageTitle>

<AuthorizeView Roles="ShowHolder,Admin">
    <Authorized>
        <div class="container py-3">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h2 class="mb-0">My Shows</h2>
                <button class="btn btn-primary" @onclick="NewShow"><span class="bi bi-plus-lg"></span> New Show</button>
            </div>

            @if (!string.IsNullOrWhiteSpace(ErrorMessage))
            {
                <div class="alert alert-danger">@ErrorMessage</div>
            }

            @if (isLoading)
            {
                <div class="text-muted">Loading shows...</div>
            }
            else
            {
                <div class="table-responsive mb-4">
                    <table class="table table-striped align-middle">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Date(s)</th>
                                <th>Status</th>
                                <th>Private</th>
                                <th>Holder Id</th>
                                <th style="width: 320px;">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                        @if (shows.Count == 0)
                        {
                            <tr><td colspan="6" class="text-muted">No shows yet.</td></tr>
                        }
                        else
                        {
                            @foreach (var s in shows.OrderByDescending(s => s.ShowDate))
                            {
                                <tr class="@((selectedShow?.Id == s.Id) ? "table-primary" : null)">
                                    <td>@s.Name</td>
                                    <td>@s.ShowDate.ToShortDateString() @(s.EndDate.HasValue ? $" - {s.EndDate.Value.ToShortDateString()}" : "")</td>
                                    <td>@s.Status</td>
                                    <td>@(s.IsPrivate ? "Yes" : "No")</td>
                                    <td>@s.ShowHolderId</td>
                                    <td>
                                        <div class="btn-group btn-group-sm" role="group">
                                            <button class="btn btn-outline-secondary" title="Edit" @onclick="() => EditShow(s)"><span class="bi bi-pencil-square"></span></button>
                                            <button class="btn btn-outline-secondary" title="Divisions" @onclick="() => SelectForDivisions(s)"><span class="bi bi-diagram-3"></span></button>
                                            <button class="btn btn-outline-secondary" title="Settings" @onclick="() => SelectForSettings(s)"><span class="bi bi-sliders"></span></button>
                                            <button class="btn btn-outline-danger" title="Delete" @onclick="() => ConfirmDelete(s)"><span class="bi bi-trash"></span></button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                        </tbody>
                    </table>
                </div>
            }

            @if (isEditing && editModel is not null)
            {
                <div class="card mb-4">
                    <div class="card-header">
                        <strong>@(string.IsNullOrEmpty(editModel.Id) ? "Create Show" : "Edit Show")</strong>
                    </div>
                    <div class="card-body">
                        <EditForm Model="editModel" OnValidSubmit="SaveAsync">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div class="row g-3">
                                <div class="col-md-6">
                                    <label class="form-label">Name</label>
                                    <InputText class="form-control" @bind-Value="editModel.Name" />
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">Status</label>
                                    <InputSelect class="form-select" @bind-Value="editModel.Status">
                                        @foreach (var st in showStatuses)
                                        {
                                            <option value="@st">@st</option>
                                        }
                                    </InputSelect>
                                </div>
                                <div class="col-12">
                                    <label class="form-label">Description</label>
                                    <InputTextArea class="form-control" rows="2" @bind-Value="editModel.Description" />
                                </div>
                                <div class="col-md-4">
                                    <label class="form-label">Start Date</label>
                                    <InputDate class="form-control" @bind-Value="editModel.ShowDate" />
                                </div>
                                <div class="col-md-4">
                                    <label class="form-label">End Date</label>
                                    <InputDate class="form-control" @bind-Value="editModel.EndDate" />
                                </div>
                                <div class="col-md-4">
                                    <label class="form-label">Show Holder Id</label>
                                    <InputNumber class="form-control" @bind-Value="editModel.ShowHolderId" />
                                    <div class="form-text">Must be a valid holder you own.</div>
                                </div>
                            </div>
                            <div class="mt-3">
                                <button type="submit" class="btn btn-success me-2"><span class="bi bi-check2"></span> Save</button>
                                <button type="button" class="btn btn-secondary" @onclick="CancelEdit"><span class="bi bi-x-lg"></span> Cancel</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            }

            @if (selectedShow is not null && showTab == ShowTab.Divisions)
            {
                <div class="card mb-4">
                    <div class="card-header">
                        <strong>Divisions for "@selectedShow.Name"</strong>
                    </div>
                    <div class="card-body">
                        <Components.Shows.DivisionManager ShowId="@int.Parse(selectedShow.Id)" />
                    </div>
                </div>
            }

            @if (selectedShow is not null && showTab == ShowTab.Settings)
            {
                <div class="card mb-4">
                    <div class="card-header">
                        <strong>Settings for "@selectedShow.Name"</strong>
                    </div>
                    <div class="card-body">
                        <Components.Shows.ShowSettings Model="@selectedShow" OnSave="SaveSettingsAsync" />
                    </div>
                </div>
            }
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="alert alert-warning m-3">You are not authorized to view this page.</div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<ShowDto> shows = new();
    private ShowDto? selectedShow;
    private ShowDto editModel = new();
    private bool isEditing;
    private bool isLoading = true;
    private string? ErrorMessage;
    private enum ShowTab { None, Divisions, Settings }
    private ShowTab showTab = ShowTab.None;

    private static readonly string[] showStatuses = new[] { "Upcoming", "InProgress", "Completed", "Cancelled" };

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        try
        {
            isLoading = true;
            var auth = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = auth.User;
            var userId = user.FindFirstValue(ClaimTypes.NameIdentifier) ?? string.Empty;
            var isAdmin = user.IsInRole("Admin");
            shows = (await ShowHolderService.GetMyShowsAsync(userId, isAdmin)).ToList();
            selectedShow = null;
            showTab = ShowTab.None;
            ErrorMessage = null;
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void NewShow()
    {
        editModel = new ShowDto
        {
            Name = "",
            Description = "",
            Status = "Upcoming",
            ShowDate = DateTime.UtcNow.Date,
            ShowType = "LiveShow",
            ShowFormat = "Regular",
            MaxEntriesPerUser = 5,
            AllowMemberOnlyEntries = false
        };
        isEditing = true;
        selectedShow = null;
        showTab = ShowTab.None;
    }

    private void EditShow(ShowDto s)
    {
        editModel = new ShowDto
        {
            Id = s.Id,
            Name = s.Name,
            Description = s.Description,
            ShowDate = s.ShowDate,
            EndDate = s.EndDate,
            Status = s.Status,
            JudgeId = s.JudgeId,
            ShowHolderId = s.ShowHolderId,
            ShowType = s.ShowType,
            ShowFormat = s.ShowFormat,
            IsPrivate = s.IsPrivate,
            MaxEntriesPerUser = s.MaxEntriesPerUser,
            AllowMemberOnlyEntries = s.AllowMemberOnlyEntries,
            EntryDeadline = s.EntryDeadline,
            JudgingDeadline = s.JudgingDeadline,
            ResultsPublishedAt = s.ResultsPublishedAt,
            IsNanQualifying = s.IsNanQualifying,
            NamhsaGuidelines = s.NamhsaGuidelines,
            AdditionalMetadata = s.AdditionalMetadata
        };
        isEditing = true;
        selectedShow = null;
        showTab = ShowTab.None;
    }

    private void CancelEdit()
    {
        isEditing = false;
        editModel = new ShowDto();
    }

    private async Task SaveAsync()
    {
        try
        {
            var auth = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = auth.User;
            var userId = user.FindFirstValue(ClaimTypes.NameIdentifier) ?? string.Empty;
            var isAdmin = user.IsInRole("Admin");

            if (string.IsNullOrWhiteSpace(editModel.Id))
                await ShowHolderService.CreateShowAsync(userId, editModel, isAdmin);
            else
                await ShowHolderService.UpdateShowAsync(userId, editModel, isAdmin);

            isEditing = false;
            await LoadAsync();
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    private void SelectForDivisions(ShowDto s)
    {
        selectedShow = s;
        showTab = ShowTab.Divisions;
        isEditing = false;
    }

    private void SelectForSettings(ShowDto s)
    {
        selectedShow = s;
        showTab = ShowTab.Settings;
        isEditing = false;
    }

    private async Task SaveSettingsAsync(ShowDto updated)
    {
        try
        {
            var auth = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = auth.User;
            var userId = user.FindFirstValue(ClaimTypes.NameIdentifier) ?? string.Empty;
            var isAdmin = user.IsInRole("Admin");
            await ShowHolderService.UpdateShowAsync(userId, updated, isAdmin);
            await LoadAsync();
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    private async Task ConfirmDelete(ShowDto s)
    {
        if (!await Task.FromResult<bool>(true)) { } // hook point for modal if needed
        try
        {
            var auth = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = auth.User;
            var userId = user.FindFirstValue(ClaimTypes.NameIdentifier) ?? string.Empty;
            var isAdmin = user.IsInRole("Admin");
            await ShowHolderService.DeleteShowAsync(userId, s.Id, isAdmin);
            await LoadAsync();
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }
}