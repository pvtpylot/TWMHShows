@page "/new-model-horse"
@page "/edit-model-horse/{Id}"
@using System.Security.Claims
@using MauiBlazorWeb.Shared.Models.DTOs
@using MauiBlazorWeb.Shared.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@inject IDataService DataService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@attribute [Authorize]

<PageTitle>@(Id == null ? "Add New Model Horse" : "Edit Model Horse")</PageTitle>

<div class="container">
    <h1>@(Id == null ? "Add New Model Horse" : "Edit Model Horse")</h1>

    <div class="mb-4">
        <a href="my-collection" class="btn btn-outline-secondary">
            <i class="oi oi-arrow-left"></i> Back to My Collection
        </a>
    </div>

    @if (loading)
    {
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }
    else
    {
        <EditForm Model="modelHorse" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator/>
            <ValidationSummary/>

            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="mb-3">
                        <label for="name" class="form-label">Name</label>
                        <InputText id="name" class="form-control" @bind-Value="modelHorse.Name"/>
                        <ValidationMessage For="@(() => modelHorse.Name)"/>
                    </div>

                    <div class="mb-3">
                        <label for="breed" class="form-label">Breed</label>
                        <InputText id="breed" class="form-control" @bind-Value="modelHorse.Breed"/>
                    </div>

                    <div class="row">
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="color" class="form-label">Color</label>
                                <InputText id="color" class="form-control" @bind-Value="modelHorse.Color"/>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="size" class="form-label">Size</label>
                                <InputText id="size" class="form-control" @bind-Value="modelHorse.Size"/>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="class" class="form-label">Class</label>
                                <InputText id="class" class="form-control" @bind-Value="modelHorse.Class"/>
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="description" class="form-label">Description</label>
                        <InputTextArea id="description" class="form-control" @bind-Value="modelHorse.Description"
                                       rows="3"/>
                        <ValidationMessage For="@(() => modelHorse.Description)"/>
                    </div>

                    <div class="mb-3">
                        <label for="notes" class="form-label">Notes</label>
                        <InputTextArea id="notes" class="form-control" @bind-Value="modelHorse.Notes" rows="3"/>
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="mb-3">
                        <label for="heroShot" class="form-label">Hero Shot Image</label>
                        <InputFile id="heroShot" OnChange="OnHeroShotChange" class="form-control" accept="image/*"/>
                    </div>

                    @if (modelHorse.HeroShotImage != null && modelHorse.HeroShotImage.Length > 0)
                    {
                        <div class="mb-3 text-center">
                            <img src="@($"data:image/jpeg;base64,{Convert.ToBase64String(modelHorse.HeroShotImage)}")"
                                 class="img-fluid img-thumbnail" alt="Hero shot" style="max-height: 300px;"/>
                            <div class="mt-2">
                                <button type="button" class="btn btn-sm btn-outline-danger" @onclick="RemoveHeroShot">
                                    Remove Image
                                </button>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="mb-3 text-center">
                            <div class="border bg-light d-flex align-items-center justify-content-center"
                                 style="height: 300px;">
                                <span class="text-muted">No image uploaded</span>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <div class="d-grid gap-2">
                <button type="submit" class="btn btn-primary">
                    @(Id == null ? "Create Model Horse" : "Update Model Horse")
                </button>
            </div>
        </EditForm>
    }
</div>

@code {
    [Parameter] public string? Id { get; set; }

    private UserModelObjectDto modelHorse = new();
    private bool loading = true;
    private string? userId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (!string.IsNullOrEmpty(Id))
            {
                // Edit mode - load existing model horse
                await LoadModelHorse();
            }
            else
            {
                // Create mode - initialize new model horse
                modelHorse = new UserModelObjectDto
                {
                    ApplicationUserId = userId,
                    CreatedAt = DateTime.UtcNow
                };
                loading = false;
            }
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }
    }

    private async Task LoadModelHorse()
    {
        try
        {
            var result = await DataService.GetUserModelObjectByIdAsync(Id!);
            if (result != null && !string.IsNullOrEmpty(result.Id))
            {
                modelHorse = result;
            }
            else
            {
                // Model horse not found, redirect to collection
                NavigationManager.NavigateTo("/my-collection");
            }
        }
        catch (Exception ex)
        {
            // In a production app, you'd want to log this error
            Console.WriteLine($"Error loading model horse: {ex.Message}");
        }
        finally
        {
            loading = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (string.IsNullOrEmpty(Id))
            {
                // Create mode
                modelHorse.ApplicationUserId = userId;
                var result = await DataService.CreateUserModelObjectAsync(modelHorse);
            }
            else
            {
                // Edit mode
                var result = await DataService.UpdateUserModelObjectAsync(Id, modelHorse);
            }

            // Navigate back to the collection
            NavigationManager.NavigateTo("/my-collection");
        }
        catch (Exception ex)
        {
            // In a production app, you'd want to log this error
            Console.WriteLine($"Error saving model horse: {ex.Message}");
        }
    }

    private async Task OnHeroShotChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            try
            {
                // Limit file size to 5MB
                const long maxFileSize = 5 * 1024 * 1024;
                if (file.Size > maxFileSize)
                {
                    // Handle file too large
                    return;
                }

                using var stream = file.OpenReadStream(maxFileSize);
                using var memoryStream = new MemoryStream();
                await stream.CopyToAsync(memoryStream);
                modelHorse.HeroShotImage = memoryStream.ToArray();
            }
            catch (Exception ex)
            {
                // Handle file read error
                Console.WriteLine($"Error reading file: {ex.Message}");
            }
        }
    }

    private void RemoveHeroShot()
    {
        modelHorse.HeroShotImage = null;
    }

}